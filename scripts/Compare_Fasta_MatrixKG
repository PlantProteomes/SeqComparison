#!/bin/env python3

from fileinput import filename
import re
from tabnanny import filename_only
from tkinter.tix import COLUMN
from typing import Sequence  # refers to regular expressions module
from Bio import SeqIO
import json
import argparse
import pandas as pd


class FastaStats:

    def __init__(self):

        self.entry_counter = 0
        self.stats = {}
        self.df_final = pd.DataFrame(columns=["Source", "Sequences", "Unique"])
        self.split_files = []
        self.filename = []
        for data_type in ['identifiers', 'sequences', 'descriptions']:
            self.stats[data_type] = {
                'n_redundant_entries': 0,
                'nonredundant_entries': {}

            }

    # this function updates count of redundant identifiers

    def add_datum(self, data_type, value):
        if value in self.stats[data_type]['nonredundant_entries']:
            self.stats[data_type]['n_redundant_entries'] += 1
            self.stats[data_type]['nonredundant_entries'][value] += 1
        else:
            self.stats[data_type]['nonredundant_entries'][value] = 1

    def read(self, filename):

        # this will open specified file
        with open(filename) as infile:

            print(f"INFO: Reading {filename}")

            # parses through records line by line
            for record in SeqIO.parse(infile, 'fasta'):
                sequence = str(record.seq)
                self.entry_counter += 1

                # this line separates the identifier and the description into 2 groups by the space
                # record is a fasta object
                match = re.match(r'^(\S+)\s*(.*)$', record.description)
                if match:  # if this line can be separated and parsed this way
                    identifier = match.group(1)
                    description = match.group(2)

                    self.add_datum('identifiers', identifier)
                    self.add_datum('sequences', sequence)
                    self.add_datum('descriptions', sequence)

                else:
                    print(
                        f"ERROR: Unable to parse description line: {record.description}")
                    exit()

    def print_stats(self):

        # printing out stats collected
        print('')
        print("There is a total of", self.entry_counter, "entries.")
        print("There are", len(
            self.stats['identifiers']['nonredundant_entries']), "unique identifiers.")
        print("There are", len(
            self.stats['sequences']['nonredundant_entries']), "unique sequences.")
        print("There are", len(
            self.stats['descriptions']['nonredundant_entries']), "unique descriptions.")
        print("There are", self.stats['identifiers']
              ['n_redundant_entries'], "redundant identifiers.")
        print("There are", self.stats['sequences']
              ['n_redundant_entries'], "redundant sequences.")
        print("There are", self.stats['descriptions']
              ['n_redundant_entries'], "redundant descriptions.")

        return [self.entry_counter, len(
            self.stats['sequences']['nonredundant_entries'])]

    def compare_stats(self, obj1, obj2, data_type):
        common_pairs = dict()
        for key in obj1.stats[data_type]['nonredundant_entries']:
            if key in obj2.stats[data_type]['nonredundant_entries']:
                common_pairs[key] = True

       # self.df_final.append((len(common_pairs))

        print("There are", len(common_pairs), "same",
              data_type, "between the 2 files")

    def parse_files_argument(self, files):
        print("Parsing input title=filename arguments")

        self.split_files = []
        for title_file in files:
            try:
                title, filename = title_file.split('=')
            except:
                print(
                    f"ERROR: Parameter '{title_file}' should have the format TITLE=FILENAME (e.g. Mito=mitochondria.2.fasta)")
                exit(1)
            split_file = {'title': title, 'filename': filename}
            splitfile_merge_columns = pd.DataFrame(columns=[title])
            self.split_files.append(split_file)
            self.filename.append(filename)
            self.df_final = pd.concat(
                [self.df_final, splitfile_merge_columns], axis=0)
            self.df_final.loc[len(self.df_final.index)] = [title, self.entry_counter, len(
                self.stats['descriptions']['nonredundant_entries']), len(
                self.stats['descriptions']['nonredundant_entries'])]

            print(self.df_final)


##########################################################################


def main():

    # Add the arguments
    argparser = argparse.ArgumentParser(
        description='Find duplicate identifiers, sequences, and descriptions in a FASTA file and create a matrix for them')
    argparser.add_argument('--show_duplicate_identifiers', action='count',
                           help='If set, print the duplicate identifiers and their count in the input file')
    argparser.add_argument('--show_duplicate_sequences', action='count',
                           help='If set, print the duplicate sequences and their count in the input file')
    argparser.add_argument('--show_duplicate_descriptions', action='count',
                           help='If set, print the duplicate descriptions and their count in the input file')
    argparser.add_argument('--show_total_reads', action='count',
                           help='If set, print the total number of rows in the input file')
    argparser.add_argument('files', type=str, nargs='+',
                           help='Filename of the FASTA file to read')

  #  argparser.add_argument('matrix build', type=int, nargs='+',
  #                         help='Enter a number larger than 3')

    args = argparser.parse_args()
    print(args.show_duplicate_sequences)
    matrix = FastaStats()
    matrix.read(args.files[1])
    matrix.parse_files_argument(args.files)
    print(matrix.df_final)


# return
'''
    for i in range(0, len(args.files)):
        file_fasta_stats = FastaStats()
        filename_a = args.files[i]
        file_fasta_stats.read(filename_a)
        values = file_fasta_stats.print_stats()
        matrix.df_final.at[i, "Sequences"] = values[0]
        matrix.df_final.at[i, "Unique"] = values[1]
'''

'''
    file2_fasta_stats = FastaStats()
    filename_b = args.files[1]
    file2_fasta_stats.read(filename_b)
    file2_fasta_stats.print_stats()
'''
'''
for i in range(0, ):
    for j in range(i, ):
        file2_fasta_stats = FastaStats()
        file2_fasta_stats.compare_stats(
            file1_fasta_stats, file2_fasta_stats, "sequences")

'''
if __name__ == "__main__":
    main()
